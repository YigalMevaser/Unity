name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      stage:
        description: 'Stage to run (build/deploy/all)'
        required: true
        default: 'all'

jobs:
  build:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'build' || github.event.inputs.stage == 'all'
    runs-on: self-hosted # Ensure this runner can access your local Kubernetes cluster
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v1

      - name: Install Dependencies for Customer Facing API
        run: helm dependency update ./client/customer-facing-api

      - name: Install Dependencies for Customer Management API
        run: helm dependency update ./server/customer-management-api

      - name: Install Dependencies for Kafka
        run: helm dependency update ./kafka-helm

      - name: Add Helm Repositories
        run: helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Update Helm Repositories
        run: helm repo update

      - name: Install Dependencies for MongoDB
        run: helm dependency update ./mongodb/my-mongodb

      - name: Build Customer Facing API
        run: echo "Building Customer Facing API..."

      - name: Build Customer Management API
        run: echo "Building Customer Management API..."

      - name: Build Kafka
        run: echo "Building Kafka"

      - name: Build MongoDB
        run: echo "Building MongoDB"

      - name: Publish Customer Facing API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-facing-api
          path: ./client/customer-facing-api

      - name: Publish Customer Management API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: customer-management-api
          path: ./server/customer-management-api

      - name: Publish Kafka Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kafka-helm
          path: ./kafka-helm

      - name: Publish MongoDB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mongodb
          path: ./mongodb/my-mongodb

      - name: List Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            console.log('Artifacts:', JSON.stringify(artifacts.data, null, 2));

  deploy:
    needs: build  # Ensure the deploy job runs after the build job
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.stage == 'deploy' || github.event.inputs.stage == 'all'
    runs-on: self-hosted # Ensure the runner can access your local Kubernetes cluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Customer Facing API Artifact
        uses: actions/download-artifact@v4
        with:
          name: customer-facing-api
          path: ./client/customer-facing-api

      - name: List Downloaded Files
        run: ls -R ./client/customer-facing-api

      - name: Download Customer Management API Artifact
        uses: actions/download-artifact@v4
        with:
          name: customer-management-api
          path: ./server/customer-management-api

      - name: Download Kafka Artifact
        uses: actions/download-artifact@v4
        with:
          name: kafka-helm
          path: ./kafka-helm

      - name: Download MongoDB Artifact
        uses: actions/download-artifact@v4
        with:
          name: mongodb
          path: ./mongodb/my-mongodb

      - name: List Downloaded Files
        run: |
          ls -R ./client/customer-facing-api
          ls -R ./server/customer-management-api
          ls -R ./kafka-helm
          ls -R ./mongodb/my-mongodb

      - name: Install KEDA
        run: |
          helm repo add kedacore https://kedacore.github.io/charts
          helm repo update
          helm upgrade --install keda kedacore/keda --namespace keda --create-namespace
        

      - name: Wait for KEDA to be Ready
        run: |
          kubectl rollout status deployment/keda-operator -n keda
          kubectl get pods -n keda

      - name: Deploy Customer Facing API with Helm
        run: helm upgrade --install customer-facing-api ./client/customer-facing-api

      - name: Deploy Customer Management API with Helm
        run: helm upgrade --install customer-management-api ./server/customer-management-api

      - name: Deploy Kafka with Helm
        run: helm upgrade --install kafka ./kafka-helm

      - name: Delete existing MongoDB resources
        run: |
          kubectl delete serviceaccount mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found
          kubectl delete service mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found
          kubectl delete deployment mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found
          kubectl delete pvc --selector app=mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found
          kubectl delete configmap --selector app=mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found
          kubectl delete secret --selector app=mongodb --namespace mongodb --force --grace-period=0 --ignore-not-found

      # - name: Wait for resources to be deleted
      #   run: sleep 30

      - name: Deploy MongoDB with Helm
        run: helm upgrade --install mongodb ./mongodb/my-mongodb --force

      - name: Clean Up Artifacts
        run: |
          Remove-Item -Path "./client/customer-facing-api", "./server/customer-management-api", "./kafka-helm", "./mongodb/my-mongodb" -Recurse -Force -ErrorAction SilentlyContinue